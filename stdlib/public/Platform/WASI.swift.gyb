//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2020 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

@_exported import SwiftWASILibc // Clang module

//  Constants defined by <math.h>
@available(swift, deprecated: 3.0, message: "Please use 'Double.pi' or '.pi' to get the value of correct type and avoid casting.")
public let M_PI = Double.pi

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 2' or '.pi / 2' to get the value of correct type and avoid casting.")
public let M_PI_2 = Double.pi / 2

@available(swift, deprecated: 3.0, message: "Please use 'Double.pi / 4' or '.pi / 4' to get the value of correct type and avoid casting.")
public let M_PI_4 = Double.pi / 4

@available(swift, deprecated: 3.0, message: "Please use '2.squareRoot()'.")
public let M_SQRT2 = 2.squareRoot()

@available(swift, deprecated: 3.0, message: "Please use '0.5.squareRoot()'.")
public let M_SQRT1_2 = 0.5.squareRoot()

//  Constants defined by <float.h>
@available(swift, deprecated: 3.0, message: "Please use 'T.radix' to get the radix of a FloatingPoint type 'T'.")
public let FLT_RADIX = Double.radix

%for type, prefix in [('Float', 'FLT'), ('Double', 'DBL')]:
//  Where does the 1 come from? C counts the usually-implicit leading
//  significand bit, but Swift does not. Neither is really right or wrong.
@available(swift, deprecated: 3.0, message: "Please use '${type}.significandBitCount + 1'.")
public let ${prefix}_MANT_DIG = ${type}.significandBitCount + 1

//  Where does the 1 come from? C models floating-point numbers as having a
//  significand in [0.5, 1), but Swift (following IEEE 754) considers the
//  significand to be in [1, 2). This rationale applies to ${prefix}_MIN_EXP
//  as well.
@available(swift, deprecated: 3.0, message: "Please use '${type}.greatestFiniteMagnitude.exponent + 1'.")
public let ${prefix}_MAX_EXP = ${type}.greatestFiniteMagnitude.exponent + 1

@available(swift, deprecated: 3.0, message: "Please use '${type}.leastNormalMagnitude.exponent + 1'.")
public let ${prefix}_MIN_EXP = ${type}.leastNormalMagnitude.exponent + 1

@available(swift, deprecated: 3.0, message: "Please use '${type}.greatestFiniteMagnitude' or '.greatestFiniteMagnitude'.")
public let ${prefix}_MAX = ${type}.greatestFiniteMagnitude

@available(swift, deprecated: 3.0, message: "Please use '${type}.ulpOfOne' or '.ulpOfOne'.")
public let ${prefix}_EPSILON = ${type}.ulpOfOne

@available(swift, deprecated: 3.0, message: "Please use '${type}.leastNormalMagnitude' or '.leastNormalMagnitude'.")
public let ${prefix}_MIN = ${type}.leastNormalMagnitude

@available(swift, deprecated: 3.0, message: "Please use '${type}.leastNonzeroMagnitude' or '.leastNonzeroMagnitude'.")
public let ${prefix}_TRUE_MIN = ${type}.leastNonzeroMagnitude

%end

public let MAP_FAILED: UnsafeMutableRawPointer! = UnsafeMutableRawPointer(bitPattern: -1)

// wasi-libc's error.h uses a macro that Swift can't import.
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EACCES'.")
public let EACCES: Int32 = 2
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EDQUOT'.")
public let EDQUOT: Int32 = 19
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EEXIST'.")
public let EEXIST: Int32 = 20
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EFBIG'.")
public let EFBIG: Int32 = 22
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EINTR'.")
public let EINTR: Int32 = 27
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EINVAL'.")
public let EINVAL: Int32 = 28
@available(*, deprecated, message: "Please use 'POSIXErrorCode.ENAMETOOLONG'.")
public let ENAMETOOLONG: Int32 = 37
@available(*, deprecated, message: "Please use 'POSIXErrorCode.ENOENT'.")
public let ENOENT: Int32 = 44
@available(*, deprecated, message: "Please use 'POSIXErrorCode.ENOSPC'.")
public let ENOSPC: Int32 = 51
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EPERM'.")
public let EPERM: Int32 = 63
@available(*, deprecated, message: "Please use 'POSIXErrorCode.EROFS'.")
public let EROFS: Int32 = 69


// wasi-libc's _seek.h uses a macro that Swift can't import.
// https://developer.apple.com/documentation/swift/using-imported-c-macros-in-swift
// https://github.com/apple/swift/blob/c55b9cc87925c5d63a21d383ad23dff056d36607/lib/ClangImporter/ImportName.cpp#L2115-L2117
// https://github.com/WebAssembly/wasi-libc/pull/148
public let SEEK_SET: Int32 = 0
public let SEEK_CUR: Int32 = 1
public let SEEK_END: Int32 = 2
